// composables/useDeviceApi.js

import { ref } from 'vue';

export const useDeviceApi = () => {
  // --- State Management ---
  const loading = ref(false);
  const error = ref(null);
  const devices = ref([]);
  
  // --- Configuration ---
  const config = useRuntimeConfig();
  const API_URL = config.public.BASE_API_URL || 'http://localhost:8080';

  /**
   * üîÑ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  const fetchDevices = async () => {
    loading.value = true;
    error.value = null;

    if (!import.meta.client) {
      loading.value = false;
      return;
    }

    const token = sessionStorage.getItem('accessToken');
    if (!token) {
      error.value = '‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô';
      loading.value = false;
      return;
    }

    try {
      const responseData = await $fetch(`${API_URL}/machines`, {
        method: 'GET',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      devices.value = responseData;
      return responseData;
    } catch (err) {
      error.value = err.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á';
      console.error('Fetch devices failed:', err);
      devices.value = [];
      return null;
    } finally {
      loading.value = false;
    }
  };

  /**
   * üìÑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏≤‡∏Å ID
   * @param {string} deviceId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  const getDeviceById = async (deviceId) => {
    if (!deviceId) {
      console.error("Device ID is required.");
      return null;
    }
    if (!import.meta.client) return null;
    const token = sessionStorage.getItem('accessToken');
    if (!token) {
      console.error("Authentication token not found.");
      return null;
    }
    try {
      const responseData = await $fetch(`${API_URL}/machines/${deviceId}`, {
        method: 'GET',
        headers: { 'Authorization': `Bearer ${token}` }
      });
      return responseData;
    } catch (err) {
      console.error(`Failed to fetch device with ID ${deviceId}:`, err.data?.message || err);
      return null;
    }
  }

  /**
   * ‚úÖ ADDED: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
   * @param {string} deviceId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
   * @param {{ deviceName: string }} payload - ‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
   * @returns {Promise<boolean>} - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
   */
  const updateDevice = async (deviceId, payload) => {
    // --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input ---
    if (!deviceId) {
      error.value = '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
      console.error(error.value);
      return false;
    }
    if (!payload || typeof payload.deviceName !== 'string' || !payload.deviceName.trim()) {
        error.value = '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà (deviceName)';
        console.error(error.value);
        return false;
    }

    loading.value = true;
    error.value = null;

    // --- ‡∏î‡∏∂‡∏á Token (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Client) ---
    if (!import.meta.client) {
      loading.value = false;
      return false;
    }
    const token = sessionStorage.getItem('accessToken');
    if (!token) {
      error.value = '‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô';
      loading.value = false;
      return false;
    }

    try {
      // --- ‡∏™‡πà‡∏á Request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ---
      await $fetch(`${API_URL}/machines/${deviceId}`, {
        method: 'PUT', // ‡∏´‡∏£‡∏∑‡∏≠ 'PATCH' ‡∏´‡∏≤‡∏Å API ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: payload // ‡∏™‡πà‡∏á Body ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡πà deviceName
      });

      return true; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

    } catch (err) {
      // --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ---
      error.value = err.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
      console.error(`Update device failed for ID ${deviceId}:`, err);
      return false; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß

    } finally {
      loading.value = false;
    }
  };

   /**
   * üßπ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏•‡∏ö Record ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
   * @param {string} deviceId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
   * @returns {Promise<boolean>} - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
   */
  const resetDevice = async (deviceId) => {
    // --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input ---
    if (!deviceId) {
      error.value = '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
      console.error(error.value);
      return false;
    }

    loading.value = true;
    error.value = null;

    // --- ‡∏î‡∏∂‡∏á Token (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Client) ---
    if (!import.meta.client) {
      loading.value = false;
      return false;
    }
    const token = sessionStorage.getItem('accessToken');
    if (!token) {
      error.value = '‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô';
      loading.value = false;
      return false;
    }

    try {
      // --- ‡∏™‡πà‡∏á Request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ---
      await $fetch(`${API_URL}/machines/reset/${deviceId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      return true; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

    } catch (err) {
      // --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ---
      error.value = err.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
      console.error(`Reset device failed for ID ${deviceId}:`, err);
      return false; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß

    } finally {
      loading.value = false;
    }
  };
  /**
     * ‚úÖ ADDED: ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
     * @param {string} deviceId - ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
     * @param {{ deviceName: string }} payload - ‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
     * @returns {Promise<boolean>} - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, false ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
     */
    const registerDevice = async (deviceId, payload) => {
        // --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input ---
        if (!deviceId) {
            error.value = '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
            console.error(error.value);
            return false;
        }
        if (!payload || typeof payload.deviceName !== 'string' || !payload.deviceName.trim()) {
            error.value = '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà (deviceName)';
            console.error(error.value);
            return false;
        }

        loading.value = true;
        error.value = null;

        // --- ‡∏î‡∏∂‡∏á Token (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Client) ---
        if (!import.meta.client) {
            loading.value = false;
            return false;
        }
        const token = sessionStorage.getItem('accessToken');
        if (!token) {
            error.value = '‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô';
            loading.value = false;
            return false;
        }

        try {
            // --- ‡∏™‡πà‡∏á Request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ---
            await $fetch(`${API_URL}/machines/register/${deviceId}`, {
                method: 'POST', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô POST
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: payload // ‡∏™‡πà‡∏á Body ‡∏ó‡∏µ‡πà‡∏°‡∏µ deviceName
            });

            return true; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

        } catch (err) {
            // --- ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ---
            error.value = err.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
            console.error(`Register device failed for ID ${deviceId}:`, err);
            return false; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß

        } finally {
            loading.value = false;
        }
    };


  return {
    // State
    loading,
    error,
    devices,
    // Methods
    fetchDevices,
    getDeviceById,
    updateDevice,
    resetDevice,
    registerDevice 
  };
};