// composables/api/useRecordApi.js

import { ref } from 'vue';

export const useRecordApi = () => {
    // --- Reactive State ---
    const records = ref([]);
    const record = ref(null);
    const pagination = ref(null);
    const loading = ref(false);
    const error = ref(null);

    // --- Configuration ---
    // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ useNuxtApp() ‡∏´‡∏£‡∏∑‡∏≠ useRuntimeConfig() ‡∏ï‡∏≤‡∏°‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á Nuxt 
    // ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ Nuxt 3, useRuntimeConfig() ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const config = useRuntimeConfig();
    const API_URL = config.public.BASE_API_URL || 'http://localhost:8080';

    // --- Function to fetch multiple records (paginated) ---
    const fetchRecords = async (machineId, options = {}) => {
        if (!machineId) {
            error.value = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Machine ID";
            return;
        }
        loading.value = true;
        error.value = null;
        if (!import.meta.client) { loading.value = false; return; }
        const token = sessionStorage.getItem('accessToken');
        if (!token) {
            error.value = '‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô';
            loading.value = false;
            return;
        }
        const { page = 1, pageSize = 5 } = options;
        const params = new URLSearchParams({ machineId, page: page.toString(), pageSize: pageSize.toString() });
        try {
            const response = await $fetch(`${API_URL}/records?${params.toString()}`, {
                method: 'GET',
                headers: { 'Authorization': `Bearer ${token}` }
            });
            const { items, totalCount, ...paginationData } = response;
            records.value = items || [];
            pagination.value = { ...paginationData, totalItems: totalCount };
        } catch (err) {
            error.value = err.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Record';
        } finally {
            loading.value = false;
        }
    };

    // --- Function to fetch a SINGLE record by its ID ---
    const fetchRecordById = async (recordId) => {
        if (!recordId) {
            error.value = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Record ID";
            return null;
        }
        loading.value = true;
        error.value = null;
        record.value = null;
        if (!import.meta.client) { loading.value = false; return null; }
        const token = sessionStorage.getItem('accessToken');
        if (!token) {
            error.value = '‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô';
            loading.value = false;
            return null;
        }
        try {
            const responseData = await $fetch(`${API_URL}/records/${recordId}`, {
                method: 'GET',
                headers: { 'Authorization': `Bearer ${token}` }
            });
            record.value = responseData;
            return responseData;
        } catch (err) {
            error.value = err.data?.message || `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Record ID: ${recordId}`;
            return null;
        } finally {
            loading.value = false;
        }
    };

    // --- Function to delete a record ---
    const deleteRecord = async (recordId) => {
        loading.value = true;
        error.value = null;

        if (!recordId) {
            error.value = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Record ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö";
            loading.value = false;
            return false;
        }
        if (!import.meta.client) {
            loading.value = false;
            return false;
        }
        const token = sessionStorage.getItem('accessToken');
        if (!token) {
            error.value = '‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô';
            loading.value = false;
            return false;
        }

        try {
            await $fetch(`${API_URL}/records/${recordId}`, {
                method: 'DELETE',
                headers: { 'Authorization': `Bearer ${token}` }
            });
            // ‡∏´‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å records array ‡πÉ‡∏ô state ‡∏î‡πâ‡∏ß‡∏¢
            records.value = records.value.filter(r => r.id !== recordId);
            return true; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        } catch (err) {
            error.value = err.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
            return false; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        } finally {
            loading.value = false;
        }
    };

    /**
     * üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö PDF
     * @param {string} recordId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
     * @param {object} body - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (patientInfo: {name, age, gender, height, weight}, isCurrentUser)
     * @returns {Promise<Blob|null>} - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Blob object ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
     */
    // üéØ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏° body ‡πÄ‡∏õ‡πá‡∏ô parameter ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô fetch call
    const downloadReportPdf = async (recordId, body) => {
        if (!recordId) {
            error.value = '‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö';
            return null;
        }

        loading.value = true;
        error.value = null;

        if (!import.meta.client) {
            loading.value = false;
            return null;
        }
        const token = sessionStorage.getItem('accessToken');
        if (!token) {
            error.value = '‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô';
            loading.value = false;
            return null;
        }

        try {
            const blob = await $fetch(`${API_URL}/records/report/${recordId}`, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    // ‡∏£‡∏∞‡∏ö‡∏∏ Content-Type ‡πÄ‡∏õ‡πá‡∏ô application/json ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö body
                    'Content-Type': 'application/json'
                },
                // üéØ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏™‡πà‡∏á body ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
                body: body,
                // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î responseType ‡πÄ‡∏õ‡πá‡∏ô 'blob' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
                responseType: 'blob'
            });
            return blob;
        } catch (err) {
            error.value = err.data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF';
            console.error('Download PDF failed:', err);
            return null;
        } finally {
            loading.value = false;
        }
    };


    return {
        records,
        record,
        pagination,
        loading,
        error,
        fetchRecords,
        fetchRecordById,
        deleteRecord,
        downloadReportPdf // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
    };
};